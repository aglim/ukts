/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RFMsg'
 * message type.
 */

public class RFMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 20;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 155;

    /** Create a new RFMsg of size 20. */
    public RFMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RFMsg of the given data_length. */
    public RFMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RFMsg with the given data_length
     * and base offset.
     */
    public RFMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RFMsg using the given byte array
     * as backing store.
     */
    public RFMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RFMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public RFMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RFMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RFMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RFMsg embedded in the given message
     * at the given base offset.
     */
    public RFMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RFMsg embedded in the given message
     * at the given base offset and length.
     */
    public RFMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RFMsg> \n";
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reply_id=0x"+Long.toHexString(get_reply_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [t=0x"+Long.toHexString(get_t())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [x=0x"+Long.toHexString(get_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [y=0x"+Long.toHexString(get_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [t_received=0x"+Long.toHexString(get_t_received())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reply_id
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reply_id' is signed (false).
     */
    public static boolean isSigned_reply_id() {
        return false;
    }

    /**
     * Return whether the field 'reply_id' is an array (false).
     */
    public static boolean isArray_reply_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reply_id'
     */
    public static int offset_reply_id() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reply_id'
     */
    public static int offsetBits_reply_id() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'reply_id'
     */
    public int get_reply_id() {
        return (int)getUIntBEElement(offsetBits_reply_id(), 16);
    }

    /**
     * Set the value of the field 'reply_id'
     */
    public void set_reply_id(int value) {
        setUIntBEElement(offsetBits_reply_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reply_id'
     */
    public static int size_reply_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reply_id'
     */
    public static int sizeBits_reply_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: t
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 't' is signed (false).
     */
    public static boolean isSigned_t() {
        return false;
    }

    /**
     * Return whether the field 't' is an array (false).
     */
    public static boolean isArray_t() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 't'
     */
    public static int offset_t() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 't'
     */
    public static int offsetBits_t() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 't'
     */
    public long get_t() {
        return (long)getUIntBEElement(offsetBits_t(), 32);
    }

    /**
     * Set the value of the field 't'
     */
    public void set_t(long value) {
        setUIntBEElement(offsetBits_t(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 't'
     */
    public static int size_t() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 't'
     */
    public static int sizeBits_t() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: x
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'x' is signed (false).
     */
    public static boolean isSigned_x() {
        return false;
    }

    /**
     * Return whether the field 'x' is an array (false).
     */
    public static boolean isArray_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'x'
     */
    public static int offset_x() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'x'
     */
    public static int offsetBits_x() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'x'
     */
    public long get_x() {
        return (long)getUIntBEElement(offsetBits_x(), 32);
    }

    /**
     * Set the value of the field 'x'
     */
    public void set_x(long value) {
        setUIntBEElement(offsetBits_x(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'x'
     */
    public static int size_x() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'x'
     */
    public static int sizeBits_x() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: y
    //   Field type: long, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'y' is signed (false).
     */
    public static boolean isSigned_y() {
        return false;
    }

    /**
     * Return whether the field 'y' is an array (false).
     */
    public static boolean isArray_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'y'
     */
    public static int offset_y() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'y'
     */
    public static int offsetBits_y() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'y'
     */
    public long get_y() {
        return (long)getUIntBEElement(offsetBits_y(), 32);
    }

    /**
     * Set the value of the field 'y'
     */
    public void set_y(long value) {
        setUIntBEElement(offsetBits_y(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'y'
     */
    public static int size_y() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'y'
     */
    public static int sizeBits_y() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: t_received
    //   Field type: long, unsigned
    //   Offset (bits): 128
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 't_received' is signed (false).
     */
    public static boolean isSigned_t_received() {
        return false;
    }

    /**
     * Return whether the field 't_received' is an array (false).
     */
    public static boolean isArray_t_received() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 't_received'
     */
    public static int offset_t_received() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 't_received'
     */
    public static int offsetBits_t_received() {
        return 128;
    }

    /**
     * Return the value (as a long) of the field 't_received'
     */
    public long get_t_received() {
        return (long)getUIntBEElement(offsetBits_t_received(), 32);
    }

    /**
     * Set the value of the field 't_received'
     */
    public void set_t_received(long value) {
        setUIntBEElement(offsetBits_t_received(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 't_received'
     */
    public static int size_t_received() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 't_received'
     */
    public static int sizeBits_t_received() {
        return 32;
    }

}
