/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'NeighborMsg'
 * message type.
 */

public class NeighborMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 19;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 110;

    /** Create a new NeighborMsg of size 19. */
    public NeighborMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new NeighborMsg of the given data_length. */
    public NeighborMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg with the given data_length
     * and base offset.
     */
    public NeighborMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg using the given byte array
     * as backing store.
     */
    public NeighborMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public NeighborMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public NeighborMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg embedded in the given message
     * at the given base offset.
     */
    public NeighborMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg embedded in the given message
     * at the given base offset and length.
     */
    public NeighborMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <NeighborMsg> \n";
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [state=0x"+Long.toHexString(get_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [unadjVal=0x"+Long.toHexString(get_unadjVal())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adjVal=0x"+Long.toHexString(get_adjVal())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [delta=0x"+Long.toHexString(get_delta())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timestamp=0x"+Long.toHexString(get_timestamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: state
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'state' is signed (false).
     */
    public static boolean isSigned_state() {
        return false;
    }

    /**
     * Return whether the field 'state' is an array (false).
     */
    public static boolean isArray_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'state'
     */
    public static int offset_state() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'state'
     */
    public static int offsetBits_state() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'state'
     */
    public short get_state() {
        return (short)getUIntBEElement(offsetBits_state(), 8);
    }

    /**
     * Set the value of the field 'state'
     */
    public void set_state(short value) {
        setUIntBEElement(offsetBits_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'state'
     */
    public static int size_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'state'
     */
    public static int sizeBits_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: unadjVal
    //   Field type: long, unsigned
    //   Offset (bits): 24
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'unadjVal' is signed (false).
     */
    public static boolean isSigned_unadjVal() {
        return false;
    }

    /**
     * Return whether the field 'unadjVal' is an array (false).
     */
    public static boolean isArray_unadjVal() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'unadjVal'
     */
    public static int offset_unadjVal() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'unadjVal'
     */
    public static int offsetBits_unadjVal() {
        return 24;
    }

    /**
     * Return the value (as a long) of the field 'unadjVal'
     */
    public long get_unadjVal() {
        return (long)getUIntBEElement(offsetBits_unadjVal(), 32);
    }

    /**
     * Set the value of the field 'unadjVal'
     */
    public void set_unadjVal(long value) {
        setUIntBEElement(offsetBits_unadjVal(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'unadjVal'
     */
    public static int size_unadjVal() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'unadjVal'
     */
    public static int sizeBits_unadjVal() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adjVal
    //   Field type: long, unsigned
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adjVal' is signed (false).
     */
    public static boolean isSigned_adjVal() {
        return false;
    }

    /**
     * Return whether the field 'adjVal' is an array (false).
     */
    public static boolean isArray_adjVal() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adjVal'
     */
    public static int offset_adjVal() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adjVal'
     */
    public static int offsetBits_adjVal() {
        return 56;
    }

    /**
     * Return the value (as a long) of the field 'adjVal'
     */
    public long get_adjVal() {
        return (long)getUIntBEElement(offsetBits_adjVal(), 32);
    }

    /**
     * Set the value of the field 'adjVal'
     */
    public void set_adjVal(long value) {
        setUIntBEElement(offsetBits_adjVal(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'adjVal'
     */
    public static int size_adjVal() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adjVal'
     */
    public static int sizeBits_adjVal() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: delta
    //   Field type: long, unsigned
    //   Offset (bits): 88
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'delta' is signed (false).
     */
    public static boolean isSigned_delta() {
        return false;
    }

    /**
     * Return whether the field 'delta' is an array (false).
     */
    public static boolean isArray_delta() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'delta'
     */
    public static int offset_delta() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'delta'
     */
    public static int offsetBits_delta() {
        return 88;
    }

    /**
     * Return the value (as a long) of the field 'delta'
     */
    public long get_delta() {
        return (long)getUIntBEElement(offsetBits_delta(), 32);
    }

    /**
     * Set the value of the field 'delta'
     */
    public void set_delta(long value) {
        setUIntBEElement(offsetBits_delta(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'delta'
     */
    public static int size_delta() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'delta'
     */
    public static int sizeBits_delta() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timestamp
    //   Field type: long, unsigned
    //   Offset (bits): 120
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timestamp' is signed (false).
     */
    public static boolean isSigned_timestamp() {
        return false;
    }

    /**
     * Return whether the field 'timestamp' is an array (false).
     */
    public static boolean isArray_timestamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timestamp'
     */
    public static int offset_timestamp() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timestamp'
     */
    public static int offsetBits_timestamp() {
        return 120;
    }

    /**
     * Return the value (as a long) of the field 'timestamp'
     */
    public long get_timestamp() {
        return (long)getUIntBEElement(offsetBits_timestamp(), 32);
    }

    /**
     * Set the value of the field 'timestamp'
     */
    public void set_timestamp(long value) {
        setUIntBEElement(offsetBits_timestamp(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'timestamp'
     */
    public static int size_timestamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timestamp'
     */
    public static int sizeBits_timestamp() {
        return 32;
    }

}
